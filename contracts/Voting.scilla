scilla_version 0

import BoolUtils

library Voting 

let one = Uint32 1
let zero = Uint32 0
let two = Uint32 2
(*let true = Bool True*)

contract Voting
(
    owner : ByStr20
)

field voters : Map ByStr20 Uint32 = Emp ByStr20 Uint32
field candidate1 : Uint32 = Uint32 0
field candidate2 : Uint32 = Uint32 0

transition Vote(candidate : Uint32, voterAdd: ByStr20)
    has_voted <- exists voters[voterAdd];
(*    has_voted = builtin contains voters voterAdd; *)
    match has_voted with 
    | True => 
        e = { _exception : "Voted twice"; message : "You have voted twice" };
        throw e
    | False => 
(*        voters[voterAdd] := one*)
        is_candidate1 = builtin eq candidate one; 
        match is_candidate1 with 
        | True => 
            vote1 <- candidate1;
            u_vote1 = builtin add vote1 one; 
            voters[voterAdd] := one;
            candidate1 := u_vote1; 
            e = { _eventname : "Voting for candidate 1 success"; amount : _amount };
            event e
        | False => 
            is_candidate2 = builtin eq candidate two; 
            match is_candidate2 with 
            | True =>
                vote2 <- candidate2;
                u_vote2 = builtin add vote2 one; 
                candidate2 := u_vote2; 
                e = { _eventname : "Voting for candidate 2 success"; amount : _amount };
                event e
            | False => 
                e = { _exception : "Unknown candidate"; message : "There is no such candidate" };
                throw e
            end 
        end 
    end 
end